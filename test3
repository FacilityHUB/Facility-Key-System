--------------------------------------------------------------------
-- Facility Key System – Interface Module (exploit-friendly)
-- v2.1
--  • Construit l'URL :
--      https://auth-key-ten.vercel.app/api/validate-key/<hub>/<checkpoint>/<key>/<hwid>
--  • Compatible Synapse / KRNL / Fluxus (syn.request / http_request / http.request)
--------------------------------------------------------------------
local HttpService      = game:GetService("HttpService")
local AnalyticsService = game:GetService("RbxAnalyticsService")

-- -----------------------------------------------------------------
-- ► Helper HTTP (prend la première API dispo)
-- -----------------------------------------------------------------
local request = http_request or (syn and syn.request) or (http and http.request)
if not request then
    error("[InterfaceKeyModule] No HTTP-request function available in this exploit.")
end

-- -----------------------------------------------------------------
-- ► BASE URL encodée en Base64  (https://auth-key-ten.vercel.app/api/validate-key)
-- -----------------------------------------------------------------
local BASE64_URL = "aHR0cHM6Ly9hdXRoLWtleS10ZW4udmVyY2VsLmFwcC9hcGkvdmFsaWRhdGUta2V5"

-- Décodeur Base64 : exploit libs d'abord, fallback Lua
local decode64 = (syn  and syn.crypt and syn.crypt.base64.decode)
              or (crypt and crypt.base64decode)
              or function(data)        -- fallback pur-Lua
                   local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                   data = data:gsub('[^'..b..'=]', '')
                   return (data:gsub('.', function(x)
                       if x == '=' then return '' end
                       local r,f='',(b:find(x)-1)
                       for i=6,1,-1 do
                           r = r .. (f%2^i - f%2^(i-1) > 0 and '1' or '0')
                       end
                       return r
                   end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                       if #x ~= 8 then return '' end
                       local c=0
                       for i=1,8 do
                           c = c + (x:sub(i,i)=='1' and 2^(8-i) or 0)
                       end
                       return string.char(c)
                   end))
              end

local BASE_URL = decode64(BASE64_URL)

--------------------------------------------------------------------
-- ► Module table
--------------------------------------------------------------------
local Interface = {}

-- Construit l'URL finale
local function buildUrl(base, hub, checkpoint, key, hwid)
    return string.format("%s/%s/%s/%s/%s", base, hub, checkpoint, key, hwid)
end

--- Validate une clé
-- @param key (string)            clé à vérifier                (obligatoire)
-- @param cfg (table, facultatif)
--        • hub        – hub name override
--        • checkpoint – checkpoint name override
--        • hwid       – HWID override
--        • base_url   – autre endpoint si besoin
-- @return (bool, any)            true + data | false + err
function Interface.validate(key, cfg)
    cfg = cfg or {}

    local hub        = cfg.hub        or rawget(_G, "hub_name")         or hub_name
    local checkpoint = cfg.checkpoint or rawget(_G, "checkpoints_name") or checkpoints_name
    local hwidValue  = cfg.hwid       or rawget(_G, "hwid")             or AnalyticsService:GetClientId()
    local base       = cfg.base_url   or BASE_URL

    if not (hub and checkpoint and key) then
        error("[InterfaceKeyModule] Missing hub_name / checkpoints_name / key")
    end

    local url = buildUrl(base, hub, checkpoint, key, hwidValue)

    -- DEBUG facultatif : décommente pour afficher l'URL et le HWID
    -- print("[DEBUG] URL  =>", url)
    -- print("[DEBUG] HWID =>", hwidValue)

    local t0 = tick()
    print(string.format("[●] Verifying key ➜ %s | %s", hub, checkpoint))

    local response = request({ Url = url, Method = "GET" })
    local latency  = math.floor((tick() - t0) * 1000)

    if response and response.StatusCode == 200 and response.Body then
        local data = HttpService:JSONDecode(response.Body)
        if data.success then
            print(string.format("[✔] Key OK in %sms (server %sms)",
                                latency, data.duration or "-"))
            return true, data
        else
            warn("[✘] Invalid key:", data.error or "Unknown error")
            return false, data.error
        end
    else
        warn(string.format("[✘] HTTP error | Status: %s | URL: %s",
                           response and response.StatusCode or "N/A", url))
        warn("Body:", response and response.Body or "Empty")
        return false, "HTTP error"
    end
end

-- Syntactic sugar : Interface("KEY") == Interface.validate("KEY")
setmetatable(Interface, {
    __call = function(_, ...)
        return Interface.validate(...)
    end
})

return Interface
